The ``7-base_geometry`` module
==============================
This modules collacts the definition of a ``BaseGeomtry`` class and its area() and integer_validator() methods

The ``BaseGeometry`` class
--------------------------
This class defines the logic for the class and it contains the definition of two methods, namely; area() and integer_validator()

The ``area`` method
-------------------
This is not implemented yet, thus, it returns an exception.
Below demonstrates its usage
      >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

      >>> bg = BaseGeometry()

      >>> try:
      ...     print(bg.area())
      ... except Exception as e:
      ...     print("[{}] {}".format(e.__class__.__name__, e))
      [Exception] area() is not implemented

      >>> bg.area()
      Traceback (most recent call last):
      Exception: area() is not implemented

      >>> bg.integer_validator("my_int", 12)

      >>> bg.integer_validator("width", 89)

      >>> try:
      ...     bg.integer_validator("name", "John")
      ... except Exception as e:
      ...     print("[{}] {}".format(e.__class__.__name__, e))
      [TypeError] name must be an integer

      >>> try:
      ...     bg.integer_validator("age", 0)
      ... except Exception as e:
      ...     print("[{}] {}".format(e.__class__.__name__, e))
      [ValueError] age must be greater than 0

      >>> try:
      ...     bg.integer_validator("distance", -4)
      ... except Exception as e:
      ...     print("[{}] {}".format(e.__class__.__name__, e))
      [ValueError] distance must be greater than 0

      >>> bg.integer_validator("name", "Julien")
      Traceback (most recent call last):
      TypeError: name must be an integer

      >>> bg.integer_validator("price", 30.5)
      Traceback (most recent call last):
      TypeError: price must be an integer
